import React, { useEffect } from "react";
import { add, update } from "../../../services/vulnService";
import { assetIndex } from "../../../services/assetService";
import { useState } from "react";
import dayjs from "dayjs";

const VulnerabilityForm = ({handleFormView, getAllVulns, selected }) => {
  
  const [assets, setAssets] = useState(null)
  
  const initialState = {
    title: '',
    AV: '',
    AC: '',
    PR: '',
    UI: '',
    S: '',
    C: '',
    A: '',
    description: '',
    status : '',
    discoveredAt :'',
    asset: ''
  }
  
  const first = selected?.cvssVector?.split("/")

  const [formData, setFormData] = useState(selected? {...selected,
    AV: first[1].split(":")[1],
    AC: first[2].split(":")[1],
    PR: first[3].split(":")[1],
    UI: first[4].split(":")[1],
    S: first[5].split(":")[1],
    C: first[6].split(":")[1],
    I: first[7].split(":")[1],
    A: first[8].split(":")[1],
  } : initialState);

  async function getAllAssets(){
      try {
         const allAssets = await assetIndex()
         setAssets(allAssets)
      } catch (err) {
        console.log(err)
        return err
      }
  }

  function handleChange(evt) {
      setFormData({...formData, [evt.target.name] : evt.target.value})
      console.log(formData)
  }


  async function handleSubmit(evt) {
    evt.preventDefault()
    console.log(formData)
    selected ? handleUpdate() : handleAdd()
  }

 
  async function handleAdd(){
      try {
       const res=  await add(formData)
       if( res.status == 201)
       {
        getAllVulns()
        handleFormView()
       }

    } catch (err) {
      console.log(err)
      return err
    }
  }

  async function handleUpdate(){
    try {
      const res = await update(selected._id, formData)
      if(res.status == 200)
      {
        getAllVulns()
        handleFormView()
      }
    } catch (err) {
      return err
    }
  }
  
  console.log("this is the formData " , formData)
  console.log(dayjs(formData.discoveredAt).format('YYYY-MM-DDTHH:mm:ss.SSS[Z]'))

  // console.log(first[1].split(":")[1])

  useEffect(()=>{getAllAssets()},[])

  return (
    <>
      <h1>Add Vulnerability</h1>
      <form onSubmit={handleSubmit}>
        <label htmlFor="title">Title: </label>
        <input type="text" id="title" name='title' onChange={handleChange} value={formData.title} required/>

        {selected
         ?
             <p>
                  CVSS:3.0/AV:<select name="AV" onChange={handleChange} value={formData.AV} ><option value="N">N</option><option value="A">A</option><option value="L">L</option><option value="P">P</option></select>/
                   AC:<select  name="AC" onChange={handleChange}  value={formData.AC}><option value="L">L</option><option value="H">H</option></select>/
                   PR:<select  name="PR" onChange={handleChange}value={formData.PR} ><option value="N">N</option><option value="L">L</option><option value="H">H</option></select>/
                   UI:<select  name="UI" onChange={handleChange} value={formData.UI}><option value="N">N</option><option value="R">R</option></select>/
                   S:<select name="S" onChange={handleChange} value={formData.S}><option value="U">U</option><option value="C">C</option></select>/
                   C:<select name="C" onChange={handleChange} value={formData.C}><option value="N">N</option><option value="L">L</option><option value="H">H</option></select>/
                   I:<select name="I" onChange={handleChange} value={formData.I}><option value="N">N</option><option value="L">L</option><option  value="H">H</option></select>/
                   A:<select name="A" onChange={handleChange} value={formData.A}><option value="N">N</option><option value="L">L</option><option value="H">H</option></select>
            </p>
          
           : 
          <div id="cal">
          <div>
            <h4>Attack vector</h4>
            <label htmlFor="av-n">Network(N)</label>
            <input type="radio" name="AV" id="av-n" value="N" onChange={handleChange} />

            <label htmlFor="av-a">Adjacent(A)</label>
            <input type="radio" name="AV" id="av-a" value="A" onChange={handleChange}/>

            <label htmlFor="av-l">Local(L)</label>
            <input type="radio" name="AV" id="av-l" value="L" onChange={handleChange} />

            <label htmlFor="av-p">Physical(P)</label>
            <input type="radio" name="AV" id="av-p" value="P" onChange={handleChange} />
          </div>

          <div>
            <h4>Attack Complexity</h4>
            <label htmlFor="ac-l">Low(L)</label>
            <input type="radio" id="ac-l" name="AC" value="L" onChange={handleChange}/>

            <label htmlFor="ac-h">High(H)</label>
            <input type="radio" id="ac-h" name="AC" value="H" onChange={handleChange} />
          </div>

          <div>
            <h4>Privileges Required</h4>
            <label htmlFor="pr-n">None(N)</label>
            <input type="radio" id="pr-n" name="PR" value="N" onChange={handleChange}/>

            <label htmlFor="pr-l">Low(L)</label>
            <input type="radio" id="pr-l" name="PR" value="L" onChange={handleChange}/>

            <label htmlFor="pr-h">High(H)</label>
            <input type="radio" id="pr-h" name="PR" value="H" onChange={handleChange}/>
          </div>

          <div>
            <h4>User Interaction</h4>
            <label htmlFor="ui-n">None</label>
            <input type="radio" id="ui-n" name="UI" value="N" onChange={handleChange} />

            <label htmlFor="ui-r">Required</label>
            <input type="radio" id="ui-r" name="UI" value="R" onChange={handleChange}/>
          </div>

          <div>
            <h4>Scope</h4>
            <label htmlFor="s-u">Unchanged</label>
            <input type="radio" id="s-u" name="S" value="U" onChange={handleChange}/>

            <label htmlFor="s-c">Changed</label>
            <input type="radio" id="s-c" name="S" value="C" onChange={handleChange}/>
          </div>

          <div>
            <h4>Confidentiality</h4>
            <label htmlFor="c-n">None</label>
            <input type="radio" id="c-n" name="C" value="N" onChange={handleChange}/>

            <label htmlFor="c-l">Low</label>
            <input type="radio" id="c-l" name="C" value="L" onChange={handleChange}/>

            <label htmlFor="c-h">High</label>
            <input type="radio" id="c-h" name="C" value="H" onChange={handleChange}/>
          </div>

          <div>
            <h4>Integrity</h4>
            <label htmlFor="i-n">None</label>
            <input type="radio" id="i-n" name="I" value="N" onChange={handleChange}/>

            <label htmlFor="i-l">Low</label>
            <input type="radio" id="i-l" name="I" value="L" onChange={handleChange}/>

            <label htmlFor="i-h">High</label>
            <input type="radio" id="i-h" name="I" value="H" onChange={handleChange}/>
          </div>

          <div>
            <h4>Availability</h4>
            <label htmlFor="a-n">None</label>
            <input type="radio" id="a-n" name="A" value="N" onChange={handleChange}/>

            <label htmlFor="a-l">Low</label>
            <input type="radio" id="a-l" name="A" value="L" onChange={handleChange} />

            <label htmlFor="a-h">High</label>
            <input type="radio" id="a-h" name="A" value="H" onChange={handleChange}/>
          </div>
        </div> }
        
        <label htmlFor="description">Description</label>
        <textarea name="description" id="description" onChange={handleChange} value={formData.description} ></textarea>

        <label htmlFor="status">Status: </label>
        <select name="status" id="status" onChange={handleChange} value={formData.status} required> 
          {/* <option disabled selected >select a status</option> */}
          <option value="Open">Open</option>
          <option value="In progress">In progress</option>
          <option value="Fixed">Fixed</option>
        </select>

        {/* required is not working */}
        {selected ? <p>asset: {formData.asset.name}</p>:
        <>
             <label htmlFor="asset">asset: </label>
         <select id='asset' name='asset' onChange={handleChange}  value={formData.asset._id} required>
              <option selected disabled>choose an asset</option>
            {assets?.map((asset, index) => (
              <option key={index} value={asset._id} >{asset.name}</option>
            ))}
        </select>       
        </>
       }

        <label htmlFor="discovered-date">Discovered at: </label>
        <input type="datetime-local" id='discovered-date' name='discoveredAt' onChange={handleChange} />
      
        <button type="submit">{selected ? 'Update vulnerability' : 'Add'}</button>
      </form>
      <br />
      <button onClick={handleFormView}>BACK</button>
    </>
  );
};

export default VulnerabilityForm;
